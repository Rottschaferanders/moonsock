#[test]
fn test_deserialize_machine_proc_stats() {
    let json = r#"
        {
            "jsonrpc": "2.0",
            "result": {
                "moonraker_stats": [
                    {
                        "time": 1626612666.850755,
                        "cpu_usage": 2.66,
                        "memory": 24732,
                        "mem_units": "kB"
                    },
                    {
                        "time": 1626612667.8521338,
                        "cpu_usage": 2.62,
                        "memory": 24732,
                        "mem_units": "kB"
                    }
                ],
                "throttled_state": {
                    "bits": 0,
                    "flags": []
                },
                "cpu_temp": 45.622,
                "network": {
                    "lo": {
                        "rx_bytes": 113516429,
                        "tx_bytes": 113516429,
                        "bandwidth": 3342.68
                    },
                    "wlan0": {
                        "rx_bytes": 48471767,
                        "tx_bytes": 113430843,
                        "bandwidth": 4455.91
                    }
                },
                "system_cpu_usage": {
                    "cpu": 2.53,
                    "cpu0": 3.03,
                    "cpu1": 5.1,
                    "cpu2": 1.02,
                    "cpu3": 1
                },
                "system_uptime": 2876970.38089603,
                "websocket_connections": 4
            },
            "id": 345
        }
    "#;

    let response: MoonResponse = serde_json::from_str(json).unwrap();

    match response {
        MoonResponse::MoonResult { result, id } => {
            assert_eq!(id, 345);
            match result {
                MoonResultData::MachineProcStats(machine_proc_stats) => {
                    assert_eq!(machine_proc_stats.moonraker_stats.len(), 2);
                    assert_eq!(machine_proc_stats.throttled_state.bits, 0);
                    assert_eq!(machine_proc_stats.throttled_state.flags, Vec::<String>::new());
                    assert_eq!(machine_proc_stats.cpu_temp, Some(45.622));
                    assert_eq!(machine_proc_stats.network.len(), 2);
                    assert_eq!(machine_proc_stats.system_cpu_usage.len(), 5);
                    assert_eq!(machine_proc_stats.system_uptime, Some(2876970.38089603));
                    assert_eq!(machine_proc_stats.websocket_connections, 4);

                    let moonraker_stat = &machine_proc_stats.moonraker_stats[0];
                    assert_eq!(moonraker_stat.time, 1626612666.850755);
                    assert_eq!(moonraker_stat.cpu_usage, 2.66);
                    assert_eq!(moonraker_stat.memory, 24732);
                    assert_eq!(moonraker_stat.mem_units, "kB");

                    let lo_network_data = machine_proc_stats.network.get("lo").unwrap();
                    assert_eq!(lo_network_data.rx_bytes, 113516429);
                    assert_eq!(lo_network_data.tx_bytes, 113516429);
                    assert_eq!(lo_network_data.bandwidth, 3342.68);

                    let wlan0_network_data = machine_proc_stats.network.get("wlan0").unwrap();
                    assert_eq!(wlan0_network_data.rx_bytes, 48471767);
                    assert_eq!(wlan0_network_data.tx_bytes, 113430843);
                    assert_eq!(wlan0_network_data.bandwidth, 4455.91);

                    let system_cpu_usage = machine_proc_stats.system_cpu_usage.get("cpu").unwrap();
                    assert_eq!(*system_cpu_usage, 2.53);
                }
                _ => assert!(false),
            }
        }
        _ => assert!(false),
    }
}